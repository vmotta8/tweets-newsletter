service:
  name: user-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    USERS_TABLE_NAME: ${self:custom.UsersTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    SEND_TWEETS_URL: ${self:custom.SendTweets.url}
    AUTH_URL: ${self:custom.Auth.url}
    AUTH_ID: ${self:custom.Auth.id}
    AUTH_USERNAME: ${self:custom.Auth.username}
    AUTH_PASSWORD: ${self:custom.Auth.password}
  iamRoleStatements:
    - ${file(resources/UsersTableIAM.yml):UsersTableIAM}
    - ${file(resources/MailQueueIAM.yml):MailQueueIAM}

resources:
  Resources:
    UsersTable: ${file(resources/UsersTable.yml):UsersTable}
  
functions:
  subscribe:
    handler: dist/src/handlers/subscribe.handler
    events:
      - http:
          method: POST
          path: /subscribe
  unsubscribe:
    handler: dist/src/handlers/unsubscribe.handler
    events:
      - http:
          method: GET # to access the route through the browser
          path: /unsubscribe/{email}
  active:
    handler: dist/src/handlers/active.handler
    events:
      - http:
          method: GET
          path: /active
          authorizer: ${self:custom.Authorizer.url}

custom:
  Authorizer:
    url: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  Auth:
    url: ${file(env.yml):Auth.url}
    id: ${file(env.yml):Auth.id}
    username: ${file(env.yml):Auth.username}
    password: ${file(env.yml):Auth.password}
  SendTweets:
    url: ${file(env.yml):SendTweets.url}
  UsersTable:
    name: !Ref UsersTable
    arn: !GetAtt UsersTable.Arn
  MailQueue:
    arn: ${cf:mail-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:mail-service-${self:provider.stage}.MailQueueUrl}
  bundle:
    linting: false